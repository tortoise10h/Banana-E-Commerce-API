// <auto-generated />
using System;
using Banana_E_Commerce_API.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banana_E_Commerce_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200609142855_Add_Field_Product_Status")]
    partial class Add_Field_Product_Status
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(3898),
                            CreatedBy = 1,
                            IsDeleted = false,
                            Name = "Trái Cây Việt",
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(4627)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7303),
                            CreatedBy = 2,
                            IsDeleted = false,
                            Name = "Trái Cây Nhập",
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7334)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7393),
                            CreatedBy = 3,
                            IsDeleted = false,
                            Name = "Trái Cây Sấy Khô",
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7396)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7401),
                            CreatedBy = 4,
                            IsDeleted = false,
                            Name = "Mứt Trái Cây>",
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 706, DateTimeKind.Utc).AddTicks(7403)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestImportProductId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("StorageManagerBillImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageManagerId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierBillImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestImportProductId");

                    b.HasIndex("StorageId");

                    b.HasIndex("StorageManagerId");

                    b.ToTable("ImportBills");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportBillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImportBillId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("ImportBillDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportProductReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextImportTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestImportProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestImportProductId");

                    b.ToTable("ImportProductReports");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NotificationTo");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdealShipTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomerReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGift")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SinglePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExportBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 710, DateTimeKind.Utc).AddTicks(1789),
                            CreatedBy = 1,
                            IsDeleted = false,
                            Method = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 710, DateTimeKind.Utc).AddTicks(2522)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 710, DateTimeKind.Utc).AddTicks(4663),
                            CreatedBy = 1,
                            IsDeleted = false,
                            Method = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 710, DateTimeKind.Utc).AddTicks(4689)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EntryPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceCurrency")
                        .HasColumnType("int");

                    b.Property<int>("ProductUnit")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StorageId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 707, DateTimeKind.Utc).AddTicks(7145),
                            CreatedBy = 1,
                            Description = "Bơ 034 từ Việt Nam, Đắk Lắk",
                            EntryPrice = 60000.0,
                            IsDeleted = false,
                            Name = "Bơ 034",
                            Origin = "Việt Nam, Đắk Lắk",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 707, DateTimeKind.Utc).AddTicks(7995)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1573),
                            CreatedBy = 2,
                            Description = "Bơ Sáp từ Việt Nam, Đắk Lắk",
                            EntryPrice = 58000.0,
                            IsDeleted = false,
                            Name = "Bơ Sáp",
                            Origin = "Việt Nam, Đắk Lắk",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1601)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1694),
                            CreatedBy = 3,
                            Description = "Bưởi Da Xanh từ Việt Nam, Đồng Nai, Tân Triều",
                            EntryPrice = 30000.0,
                            IsDeleted = false,
                            Name = "Bưởi Da Xanh",
                            Origin = "Việt Nam, Đồng Nai, Tân Triều",
                            PriceCurrency = 1,
                            ProductUnit = 3,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1696)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1795),
                            CreatedBy = 3,
                            Description = "Có sắc tố đặc biệt, rất hiệu dụng trong quá trình chống oxy hóa",
                            EntryPrice = 65000.0,
                            IsDeleted = false,
                            Name = "Cà Chua Đen",
                            Origin = "Hà Nội",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1797)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1802),
                            CreatedBy = 4,
                            Description = "Cam Sành Miền Tây",
                            EntryPrice = 15000.0,
                            IsDeleted = false,
                            Name = "Cam Sành",
                            Origin = "Miền Tây",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1804)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1808),
                            CreatedBy = 1,
                            Description = "Chanh đào tươi Đà Lạt",
                            EntryPrice = 40000.0,
                            IsDeleted = false,
                            Name = "Chanh Đào Tươi",
                            Origin = "Đà Lạt",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1810)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1814),
                            CreatedBy = 2,
                            Description = "Chôm chôm nhãn",
                            EntryPrice = 35000.0,
                            IsDeleted = false,
                            Name = "Chôm Chôm Nhãn",
                            Origin = "Đồng Bằng Sông Cửu Long",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1817)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1821),
                            CreatedBy = 3,
                            Description = "Nhãn Lồng",
                            EntryPrice = 25000.0,
                            IsDeleted = false,
                            Name = "Nhãn Lồng",
                            Origin = "Hưng Yên",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1823)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1829),
                            CreatedBy = 4,
                            Description = "Thanh Long Ruột Đỏ",
                            EntryPrice = 22000.0,
                            IsDeleted = false,
                            Name = "Thanh Long Ruột Đỏ",
                            Origin = "Bình Thuận",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1832)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1836),
                            CreatedBy = 1,
                            Description = "Thanh long ruột trắng",
                            EntryPrice = 25000.0,
                            IsDeleted = false,
                            Name = "Thanh Long Ruột Trắng",
                            Origin = "Bình Thuận",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1838)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1843),
                            CreatedBy = 2,
                            Description = "Dâu tây đà lạt giống Mỹ",
                            EntryPrice = 120000.0,
                            IsDeleted = false,
                            Name = "Dâu Tây Đà Lạt",
                            Origin = "Đà Lạt",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1845)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1849),
                            CreatedBy = 3,
                            Description = "Dưa lưới Bình Dương",
                            EntryPrice = 30000.0,
                            IsDeleted = false,
                            Name = "Dưa Lưới",
                            Origin = "Bình Dương",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1852)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1856),
                            CreatedBy = 4,
                            Description = "Dưa Pepino Mexico",
                            EntryPrice = 45000.0,
                            IsDeleted = false,
                            Name = "Dưới Pepino",
                            Origin = "Mexico",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1858)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1863),
                            CreatedBy = 1,
                            Description = "Cherry Mỹ",
                            EntryPrice = 310000.0,
                            IsDeleted = false,
                            Name = "Cherry Mỹ",
                            Origin = "Mỹ",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1865)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1869),
                            CreatedBy = 2,
                            Description = "Việt Quất Mỹ",
                            EntryPrice = 380000.0,
                            IsDeleted = false,
                            Name = "Việt Quất Mỹ",
                            Origin = "Mỹ",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1871)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1875),
                            CreatedBy = 3,
                            Description = "Dưa Lê Hàn",
                            EntryPrice = 180000.0,
                            IsDeleted = false,
                            Name = "Dưa Lê Hàn",
                            Origin = "Hàn Quốc",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1878)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1882),
                            CreatedBy = 4,
                            Description = "Táo New Zealand",
                            EntryPrice = 200000.0,
                            IsDeleted = false,
                            Name = "Táo New Zealand",
                            Origin = "New Zealand",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1885)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1889),
                            CreatedBy = 1,
                            Description = "Kiwi Vàng New Zealand ",
                            EntryPrice = 130000.0,
                            IsDeleted = false,
                            Name = "Kiwi Vàng New Zealand ",
                            Origin = "New Zealand",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1892)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1896),
                            CreatedBy = 2,
                            Description = "Nho xanh Úc",
                            EntryPrice = 320000.0,
                            IsDeleted = false,
                            Name = "Nho xanh Úc",
                            Origin = "Úc",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1898)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1903),
                            CreatedBy = 3,
                            Description = "Dâu Anh Đào Nhật",
                            EntryPrice = 610000.0,
                            IsDeleted = false,
                            Name = "Dâu Anh Đào Nhật",
                            Origin = "Nhật Bản",
                            PriceCurrency = 1,
                            ProductUnit = 8,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1905)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1909),
                            CreatedBy = 4,
                            Description = "Dưa Hấu Luna Piena Nhật",
                            EntryPrice = 170000.0,
                            IsDeleted = false,
                            Name = "Dưa Hấu Luna Piena Nhật",
                            Origin = "Nhật Bản",
                            PriceCurrency = 1,
                            ProductUnit = 3,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1912)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1916),
                            CreatedBy = 1,
                            Description = "Sầu Riêng Muthong Thái",
                            EntryPrice = 100000.0,
                            IsDeleted = false,
                            Name = "Sầu Riêng Muthong Thái",
                            Origin = "Thái Lan",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1919)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1923),
                            CreatedBy = 2,
                            Description = "Bơ Úc (Bơ Hass)",
                            EntryPrice = 140000.0,
                            IsDeleted = false,
                            Name = "Bơ Úc (Bơ Hass)",
                            Origin = "Úc",
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Status = 0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 708, DateTimeKind.Utc).AddTicks(1926)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestExportProductId")
                        .HasColumnType("int");

                    b.Property<int>("StorageManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestExportProductId");

                    b.HasIndex("StorageManagerId");

                    b.ToTable("ProductExportBills");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExportBillId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExportBillId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("ProductExportDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("ProductFavorites");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AfterDiscountPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("KgSale")
                        .HasColumnType("float");

                    b.Property<int>("PriceCurrency")
                        .HasColumnType("int");

                    b.Property<double>("PricePerKg")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TierId");

                    b.ToTable("ProductTiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(5956),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 100000.0,
                            ProductId = 1,
                            Quantity = 57.0,
                            SalePrice = 100000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(6757)
                        },
                        new
                        {
                            Id = 2,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8611),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 110000.0,
                            ProductId = 2,
                            Quantity = 50.0,
                            SalePrice = 110000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8636)
                        },
                        new
                        {
                            Id = 3,
                            AfterDiscountPrice = 243000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8670),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 2.7000000000000002,
                            PriceCurrency = 1,
                            PricePerKg = 90000.0,
                            ProductId = 3,
                            Quantity = 62.0,
                            SalePrice = 243000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8672)
                        },
                        new
                        {
                            Id = 4,
                            AfterDiscountPrice = 130000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8676),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 130000.0,
                            ProductId = 4,
                            Quantity = 39.0,
                            SalePrice = 130000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8679)
                        },
                        new
                        {
                            Id = 5,
                            AfterDiscountPrice = 45000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8683),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 45000.0,
                            ProductId = 5,
                            Quantity = 50.0,
                            SalePrice = 45000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8685)
                        },
                        new
                        {
                            Id = 6,
                            AfterDiscountPrice = 80000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8690),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 80000.0,
                            ProductId = 6,
                            Quantity = 50.0,
                            SalePrice = 80000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8692)
                        },
                        new
                        {
                            Id = 7,
                            AfterDiscountPrice = 75000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8696),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 75000.0,
                            ProductId = 7,
                            Quantity = 50.0,
                            SalePrice = 75000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8698)
                        },
                        new
                        {
                            Id = 8,
                            AfterDiscountPrice = 65000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8702),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 65000.0,
                            ProductId = 8,
                            Quantity = 50.0,
                            SalePrice = 65000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8706)
                        },
                        new
                        {
                            Id = 9,
                            AfterDiscountPrice = 66000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8711),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 66000.0,
                            ProductId = 9,
                            Quantity = 50.0,
                            SalePrice = 66000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8714)
                        },
                        new
                        {
                            Id = 10,
                            AfterDiscountPrice = 58000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8717),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 58000.0,
                            ProductId = 10,
                            Quantity = 50.0,
                            SalePrice = 58000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8722)
                        },
                        new
                        {
                            Id = 11,
                            AfterDiscountPrice = 260000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8726),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 260000.0,
                            ProductId = 11,
                            Quantity = 50.0,
                            SalePrice = 260000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8728)
                        },
                        new
                        {
                            Id = 12,
                            AfterDiscountPrice = 70000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8732),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 70000.0,
                            ProductId = 12,
                            Quantity = 50.0,
                            SalePrice = 70000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8735)
                        },
                        new
                        {
                            Id = 13,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8738),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 100000.0,
                            ProductId = 13,
                            Quantity = 50.0,
                            SalePrice = 100000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8740)
                        },
                        new
                        {
                            Id = 14,
                            AfterDiscountPrice = 620000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8744),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 620000.0,
                            ProductId = 14,
                            Quantity = 50.0,
                            SalePrice = 620000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8746)
                        },
                        new
                        {
                            Id = 15,
                            AfterDiscountPrice = 700000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8750),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 700000.0,
                            ProductId = 15,
                            Quantity = 50.0,
                            SalePrice = 700000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8752)
                        },
                        new
                        {
                            Id = 16,
                            AfterDiscountPrice = 400000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8757),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 400000.0,
                            ProductId = 16,
                            Quantity = 50.0,
                            SalePrice = 400000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8759)
                        },
                        new
                        {
                            Id = 17,
                            AfterDiscountPrice = 480000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8764),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 480000.0,
                            ProductId = 17,
                            Quantity = 50.0,
                            SalePrice = 480000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8766)
                        },
                        new
                        {
                            Id = 18,
                            AfterDiscountPrice = 330000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8770),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 330000.0,
                            ProductId = 18,
                            Quantity = 50.0,
                            SalePrice = 330000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8772)
                        },
                        new
                        {
                            Id = 19,
                            AfterDiscountPrice = 700000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8776),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 700000.0,
                            ProductId = 19,
                            Quantity = 50.0,
                            SalePrice = 700000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8778)
                        },
                        new
                        {
                            Id = 20,
                            AfterDiscountPrice = 400000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8817),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 0.5,
                            PriceCurrency = 1,
                            PricePerKg = 400000.0,
                            ProductId = 20,
                            Quantity = 50.0,
                            SalePrice = 400000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8820)
                        },
                        new
                        {
                            Id = 21,
                            AfterDiscountPrice = 900000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8824),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 3.0,
                            PriceCurrency = 1,
                            PricePerKg = 900000.0,
                            ProductId = 21,
                            Quantity = 50.0,
                            SalePrice = 900000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8828)
                        },
                        new
                        {
                            Id = 22,
                            AfterDiscountPrice = 230000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8833),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 230000.0,
                            ProductId = 22,
                            Quantity = 50.0,
                            SalePrice = 230000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8835)
                        },
                        new
                        {
                            Id = 23,
                            AfterDiscountPrice = 300000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8839),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 300000.0,
                            ProductId = 23,
                            Quantity = 50.0,
                            SalePrice = 300000.0,
                            TierId = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8843)
                        },
                        new
                        {
                            Id = 24,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8848),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 100000.0,
                            ProductId = 1,
                            Quantity = 0.0,
                            SalePrice = 100000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8850)
                        },
                        new
                        {
                            Id = 25,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8854),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 110000.0,
                            ProductId = 2,
                            Quantity = 0.0,
                            SalePrice = 110000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8856)
                        },
                        new
                        {
                            Id = 26,
                            AfterDiscountPrice = 243000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8860),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 2.7000000000000002,
                            PriceCurrency = 1,
                            PricePerKg = 90000.0,
                            ProductId = 3,
                            Quantity = 0.0,
                            SalePrice = 243000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8862)
                        },
                        new
                        {
                            Id = 27,
                            AfterDiscountPrice = 130000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8867),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 130000.0,
                            ProductId = 4,
                            Quantity = 0.0,
                            SalePrice = 130000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8869)
                        },
                        new
                        {
                            Id = 28,
                            AfterDiscountPrice = 45000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8872),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 45000.0,
                            ProductId = 5,
                            Quantity = 0.0,
                            SalePrice = 45000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8877)
                        },
                        new
                        {
                            Id = 29,
                            AfterDiscountPrice = 80000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8881),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 80000.0,
                            ProductId = 6,
                            Quantity = 0.0,
                            SalePrice = 80000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8883)
                        },
                        new
                        {
                            Id = 30,
                            AfterDiscountPrice = 75000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8887),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 75000.0,
                            ProductId = 7,
                            Quantity = 0.0,
                            SalePrice = 75000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8888)
                        },
                        new
                        {
                            Id = 31,
                            AfterDiscountPrice = 65000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8892),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 65000.0,
                            ProductId = 8,
                            Quantity = 0.0,
                            SalePrice = 65000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8894)
                        },
                        new
                        {
                            Id = 32,
                            AfterDiscountPrice = 66000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8897),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 66000.0,
                            ProductId = 9,
                            Quantity = 0.0,
                            SalePrice = 66000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8899)
                        },
                        new
                        {
                            Id = 33,
                            AfterDiscountPrice = 58000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8903),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 58000.0,
                            ProductId = 10,
                            Quantity = 0.0,
                            SalePrice = 58000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8905)
                        },
                        new
                        {
                            Id = 34,
                            AfterDiscountPrice = 260000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8908),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 260000.0,
                            ProductId = 11,
                            Quantity = 0.0,
                            SalePrice = 260000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8910)
                        },
                        new
                        {
                            Id = 35,
                            AfterDiscountPrice = 70000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8914),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 70000.0,
                            ProductId = 12,
                            Quantity = 0.0,
                            SalePrice = 70000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8916)
                        },
                        new
                        {
                            Id = 36,
                            AfterDiscountPrice = 100000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8920),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 100000.0,
                            ProductId = 13,
                            Quantity = 0.0,
                            SalePrice = 100000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8921)
                        },
                        new
                        {
                            Id = 37,
                            AfterDiscountPrice = 620000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8925),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 620000.0,
                            ProductId = 14,
                            Quantity = 0.0,
                            SalePrice = 620000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8927)
                        },
                        new
                        {
                            Id = 38,
                            AfterDiscountPrice = 700000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8930),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 700000.0,
                            ProductId = 15,
                            Quantity = 0.0,
                            SalePrice = 700000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8932)
                        },
                        new
                        {
                            Id = 39,
                            AfterDiscountPrice = 400000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8936),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 400000.0,
                            ProductId = 16,
                            Quantity = 0.0,
                            SalePrice = 400000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8938)
                        },
                        new
                        {
                            Id = 40,
                            AfterDiscountPrice = 480000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8943),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 480000.0,
                            ProductId = 17,
                            Quantity = 0.0,
                            SalePrice = 480000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8945)
                        },
                        new
                        {
                            Id = 41,
                            AfterDiscountPrice = 330000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8948),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 330000.0,
                            ProductId = 18,
                            Quantity = 0.0,
                            SalePrice = 330000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8950)
                        },
                        new
                        {
                            Id = 42,
                            AfterDiscountPrice = 700000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8954),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 700000.0,
                            ProductId = 19,
                            Quantity = 0.0,
                            SalePrice = 700000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8956)
                        },
                        new
                        {
                            Id = 43,
                            AfterDiscountPrice = 400000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8959),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 0.5,
                            PriceCurrency = 1,
                            PricePerKg = 400000.0,
                            ProductId = 20,
                            Quantity = 0.0,
                            SalePrice = 400000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8961)
                        },
                        new
                        {
                            Id = 44,
                            AfterDiscountPrice = 900000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8964),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 3.0,
                            PriceCurrency = 1,
                            PricePerKg = 900000.0,
                            ProductId = 21,
                            Quantity = 0.0,
                            SalePrice = 900000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8966)
                        },
                        new
                        {
                            Id = 45,
                            AfterDiscountPrice = 230000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8970),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 230000.0,
                            ProductId = 22,
                            Quantity = 0.0,
                            SalePrice = 230000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8971)
                        },
                        new
                        {
                            Id = 46,
                            AfterDiscountPrice = 300000.0,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8975),
                            DiscountPercentage = 0,
                            IsDeleted = false,
                            KgSale = 1.0,
                            PriceCurrency = 1,
                            PricePerKg = 300000.0,
                            ProductId = 23,
                            Quantity = 0.0,
                            SalePrice = 300000.0,
                            TierId = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 709, DateTimeKind.Utc).AddTicks(8977)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductTierTransferReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromTierId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("ToTierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ToTierId");

                    b.ToTable("ProductTierTransferReports");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<int>("StarNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductTierId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RemoveProductQuantityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductTierId");

                    b.ToTable("RemoveProductQuantityReports");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("RequestExportProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTierId");

                    b.HasIndex("RequestExportProductId");

                    b.ToTable("RequestExportDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestExportProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("RequestExportProducts");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestImportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductTierId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityLeft")
                        .HasColumnType("float");

                    b.Property<int>("RequestImportProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTierId");

                    b.HasIndex("RequestImportProductId");

                    b.ToTable("RequestImportDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestImportProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("RequestImportProducts");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(2510),
                            IsDeleted = false,
                            RoleName = 0,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(3106)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(3983),
                            IsDeleted = false,
                            RoleName = 1,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(4005)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(4081),
                            IsDeleted = false,
                            RoleName = 2,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(4083)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(4085),
                            IsDeleted = false,
                            RoleName = 3,
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 702, DateTimeKind.Utc).AddTicks(4087)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductExportBillId")
                        .HasColumnType("int");

                    b.Property<int>("ShipperId")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCharge")
                        .HasColumnType("float");

                    b.Property<string>("StreetLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductExportBillId");

                    b.HasIndex("ShipperId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SizeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 705, DateTimeKind.Utc).AddTicks(4162),
                            IsDeleted = false,
                            Location = "Tiểu Vương Quốc Bình Chánh",
                            Name = "Hoàng Khố",
                            Size = 1000.2,
                            SizeUnit = "m2",
                            UpdatedAt = new DateTime(2020, 6, 9, 14, 28, 53, 705, DateTimeKind.Utc).AddTicks(7361)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.StorageManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StorageManagers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TierOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            TierOption = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            TierOption = 2
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Address", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Admin", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Admin", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Cart", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.CartDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Category", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Categories")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Customer", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBill", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.RequestImportProduct", "RequestImportProduct")
                        .WithMany("ImportBills")
                        .HasForeignKey("RequestImportProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("ImportBills")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ImportBills")
                        .HasForeignKey("StorageManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBillDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ImportBill", "ImportBill")
                        .WithMany("ImportBillDetails")
                        .HasForeignKey("ImportBillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("ImportBillDetails")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportProductReport", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ImportProductReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.RequestImportProduct", "RequestImportProduct")
                        .WithMany("ImportProductReports")
                        .HasForeignKey("RequestImportProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Invoice", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Shipment", "Shipment")
                        .WithOne("Invoice")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Invoice", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Manager", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Manager", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Notification", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Order", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.OrderItem", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Payment", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Product", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Products")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("Products")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportBill", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.RequestExportProduct", "RequestExportProduct")
                        .WithMany("ProductExportBills")
                        .HasForeignKey("RequestExportProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ProductExportBills")
                        .HasForeignKey("StorageManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ProductExportBill", "ProductExportBill")
                        .WithMany("ProductExportDetails")
                        .HasForeignKey("ExportBillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("ProductExportDetails")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductFavorite", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("ProductFavorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("ProductFavorites")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductImage", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductTier", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("ProductTiers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Tier", "Tier")
                        .WithMany("ProductTiers")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductTierTransferReport", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ProductTierTransferReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("ProductTierTransferReports")
                        .HasForeignKey("ToTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Rating", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Rates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("Rates")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RefreshToken", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RemoveProductQuantityReport", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("RemoveProductQuantityReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("RemoveProductQuantityReports")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestExportDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("RequestExportDetails")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.RequestExportProduct", "RequestExportProduct")
                        .WithMany("RequestExportDetails")
                        .HasForeignKey("RequestExportProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestExportProduct", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("RequestExportProducts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Order", "Order")
                        .WithOne("RequestExportProduct")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.RequestExportProduct", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestImportDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ProductTier", "ProductTier")
                        .WithMany("RequestImportDetails")
                        .HasForeignKey("ProductTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.RequestImportProduct", "RequestImportProduct")
                        .WithMany("RequestImportDetails")
                        .HasForeignKey("RequestImportProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RequestImportProduct", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("RequestImportProducts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipment", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Banana_E_Commerce_API.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductExportBill", "ProductExportBill")
                        .WithMany()
                        .HasForeignKey("ProductExportBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Shipper", "Shipper")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipper", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Shipper")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Shipper", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.StorageManager", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("StorageManagers")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("StorageManager")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.StorageManager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.User", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
