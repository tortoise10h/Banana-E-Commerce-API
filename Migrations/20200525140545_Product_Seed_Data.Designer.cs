// <auto-generated />
using System;
using Banana_E_Commerce_API.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banana_E_Commerce_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200525140545_Product_Seed_Data")]
    partial class Product_Seed_Data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(770),
                            CreatedBy = 1,
                            IsDeleted = false,
                            Name = "Trái Cây Việt",
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(1313)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2534),
                            CreatedBy = 2,
                            IsDeleted = false,
                            Name = "Trái Cây Nhập",
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2556)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2587),
                            CreatedBy = 3,
                            IsDeleted = false,
                            Name = "Trái Cây Sấy Khô",
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2589)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2591),
                            CreatedBy = 4,
                            IsDeleted = false,
                            Name = "Mứt Trái Cây>",
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(2592)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("StorageManagerId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.HasIndex("StorageManagerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ImportBills");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportBillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplyProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImportBillId");

                    b.HasIndex("SupplyProductId");

                    b.ToTable("ImportBillDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NotificationTo");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdealShipTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomerReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGift")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SinglePrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExportBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceCurrency")
                        .HasColumnType("int");

                    b.Property<int>("ProductUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StorageId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(6818),
                            CreatedBy = 1,
                            Description = "Bơ 034 từ Việt Nam, Đắk Lắk",
                            IsDeleted = false,
                            Name = "Bơ 034",
                            Origin = "Việt Nam, Đắk Lắk",
                            Price = 100000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 100.0,
                            SalePrice = 90000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(7265)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9230),
                            CreatedBy = 2,
                            Description = "Bơ Sáp từ Việt Nam, Đắk Lắk",
                            IsDeleted = false,
                            Name = "Bơ Sáp",
                            Origin = "Việt Nam, Đắk Lắk",
                            Price = 90000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 87.0,
                            SalePrice = 70000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9245)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9291),
                            CreatedBy = 3,
                            Description = "Bưởi Da Xanh từ Việt Nam, Đồng Nai, Tân Triều",
                            IsDeleted = false,
                            Name = "Bưởi Da Xanh",
                            Origin = "Việt Nam, Đồng Nai, Tân Triều",
                            Price = 160000.0,
                            PriceCurrency = 1,
                            ProductUnit = 3,
                            Quantity = 60.0,
                            SalePrice = 140000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9293)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9297),
                            CreatedBy = 3,
                            Description = "Có sắc tố đặc biệt, rất hiệu dụng trong quá trình chống oxy hóa",
                            IsDeleted = false,
                            Name = "Cà Chua Đen",
                            Origin = "Hà Nội",
                            Price = 110000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 27.0,
                            SalePrice = 90000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9298)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9401),
                            CreatedBy = 4,
                            Description = "Cam Sành Miền Tây",
                            IsDeleted = false,
                            Name = "Cam Sành",
                            Origin = "Miền Tây",
                            Price = 40000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 23.0,
                            SalePrice = 30000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9403)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9406),
                            CreatedBy = 1,
                            Description = "Chanh đào tươi Đà Lạt",
                            IsDeleted = false,
                            Name = "Chanh Đào Tươi",
                            Origin = "Đà Lạt",
                            Price = 80000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 54.0,
                            SalePrice = 70000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9407)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9411),
                            CreatedBy = 2,
                            Description = "Chôm chôm nhãn",
                            IsDeleted = false,
                            Name = "Chôm Chôm Nhãn",
                            Origin = "Đồng Bằng Sông Cửu Long",
                            Price = 75000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 122.0,
                            SalePrice = 60000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9412)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9415),
                            CreatedBy = 3,
                            Description = "Nhãn Lồng",
                            IsDeleted = false,
                            Name = "Nhãn Lồng",
                            Origin = "Hưng Yên",
                            Price = 50000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 89.0,
                            SalePrice = 38000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9416)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9419),
                            CreatedBy = 4,
                            Description = "Thanh Long Ruột Đỏ",
                            IsDeleted = false,
                            Name = "Thanh Long Ruột Đỏ",
                            Origin = "Bình Thuận",
                            Price = 55000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 65.0,
                            SalePrice = 45000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9420)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9423),
                            CreatedBy = 1,
                            Description = "Thanh long ruột trắng",
                            IsDeleted = false,
                            Name = "Thanh Long Ruột Trắng",
                            Origin = "Bình Thuận",
                            Price = 40000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 50.0,
                            SalePrice = 30000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9425)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9428),
                            CreatedBy = 2,
                            Description = "Dâu tây đà lạt giống Mỹ",
                            IsDeleted = false,
                            Name = "Dâu Tây Đà Lạt",
                            Origin = "Đà Lạt",
                            Price = 200000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 44.0,
                            SalePrice = 180000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9429)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9432),
                            CreatedBy = 3,
                            Description = "Dưa lưới Bình Dương",
                            IsDeleted = false,
                            Name = "Dưa Lưới",
                            Origin = "Bình Dương",
                            Price = 70000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 33.0,
                            SalePrice = 60000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9433)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9436),
                            CreatedBy = 4,
                            Description = "Dưa Pepino Mexico",
                            IsDeleted = false,
                            Name = "Dưới Pepino",
                            Origin = "Mexico",
                            Price = 150000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 21.0,
                            SalePrice = 120000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9437)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9440),
                            CreatedBy = 1,
                            Description = "Cherry Mỹ",
                            IsDeleted = false,
                            Name = "Cherry Mỹ",
                            Origin = "Mỹ",
                            Price = 750000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 12.0,
                            SalePrice = 700000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9441)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9444),
                            CreatedBy = 2,
                            Description = "Việt Quất Mỹ",
                            IsDeleted = false,
                            Name = "Việt Quất Mỹ",
                            Origin = "Mỹ",
                            Price = 900000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 19.0,
                            SalePrice = 800000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9445)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9448),
                            CreatedBy = 3,
                            Description = "Dưa Lê Hàn",
                            IsDeleted = false,
                            Name = "Dưa Lê Hàn",
                            Origin = "Hàn Quốc",
                            Price = 400000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 28.0,
                            SalePrice = 300000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9449)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9452),
                            CreatedBy = 4,
                            Description = "Táo New Zealand",
                            IsDeleted = false,
                            Name = "Táo New Zealand",
                            Origin = "New Zealand",
                            Price = 450000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 21.0,
                            SalePrice = 400000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9454)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9457),
                            CreatedBy = 1,
                            Description = "Kiwi Vàng New Zealand ",
                            IsDeleted = false,
                            Name = "Kiwi Vàng New Zealand ",
                            Origin = "New Zealand",
                            Price = 300000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 21.0,
                            SalePrice = 260000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9458)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9461),
                            CreatedBy = 2,
                            Description = "Nho xanh Úc",
                            IsDeleted = false,
                            Name = "Nho xanh Úc",
                            Origin = "Úc",
                            Price = 610000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 65.0,
                            SalePrice = 600000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9462)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9465),
                            CreatedBy = 3,
                            Description = "Dâu Anh Đào Nhật",
                            IsDeleted = false,
                            Name = "Dâu Anh Đào Nhật",
                            Origin = "Nhật Bản",
                            Price = 1000000.0,
                            PriceCurrency = 1,
                            ProductUnit = 8,
                            Quantity = 150.0,
                            SalePrice = 950000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9466)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9469),
                            CreatedBy = 4,
                            Description = "Dưa Hấu Luna Piena Nhật",
                            IsDeleted = false,
                            Name = "Dưa Hấu Luna Piena Nhật",
                            Origin = "Nhật Bản",
                            Price = 550000.0,
                            PriceCurrency = 1,
                            ProductUnit = 3,
                            Quantity = 20.0,
                            SalePrice = 450000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9470)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9473),
                            CreatedBy = 1,
                            Description = "Sầu Riêng Muthong Thái",
                            IsDeleted = false,
                            Name = "Sầu Riêng Muthong Thái",
                            Origin = "Thái Lan",
                            Price = 200000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 30.0,
                            SalePrice = 185000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9474)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9477),
                            CreatedBy = 2,
                            Description = "Bơ Úc (Bơ Hass)",
                            IsDeleted = false,
                            Name = "Bơ Úc (Bơ Hass)",
                            Origin = "Úc",
                            Price = 450000.0,
                            PriceCurrency = 1,
                            ProductUnit = 7,
                            Quantity = 51.0,
                            SalePrice = 350000.0,
                            StorageId = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 249, DateTimeKind.Utc).AddTicks(9478)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int>("StorageManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StorageManagerId");

                    b.ToTable("ProductExportBills");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExportBillId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExportBillId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductExportDetails");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFavorites");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StarNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(6635),
                            IsDeleted = false,
                            RoleName = 0,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(7162)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8022),
                            IsDeleted = false,
                            RoleName = 2,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8039)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8093),
                            IsDeleted = false,
                            RoleName = 1,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8095)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8097),
                            IsDeleted = false,
                            RoleName = 3,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8099)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8100),
                            IsDeleted = false,
                            RoleName = 4,
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 246, DateTimeKind.Utc).AddTicks(8102)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductExportBillId")
                        .HasColumnType("int");

                    b.Property<int>("ShipperId")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCharge")
                        .HasColumnType("float");

                    b.Property<string>("StreetLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductExportBillId")
                        .IsUnique();

                    b.HasIndex("ShipperId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SizeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 248, DateTimeKind.Utc).AddTicks(7247),
                            CreatedBy = 3,
                            IsDeleted = false,
                            Location = "Tiểu Vương Quốc Bình Chánh",
                            Name = "Hoàng Khố",
                            Size = 1000.2,
                            SizeUnit = "m2",
                            UpdatedAt = new DateTime(2020, 5, 25, 14, 5, 42, 248, DateTimeKind.Utc).AddTicks(7724)
                        });
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.StorageManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StorageManagers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.SupplierPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.SupplyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplyProducts");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Address", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Admin", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Cart", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.CartDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Category", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Categories")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Customer", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBill", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("ImportBills")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ImportBills")
                        .HasForeignKey("StorageManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Supplier", "Supplier")
                        .WithMany("ImportBills")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ImportBillDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ImportBill", "ImportBill")
                        .WithMany("ImportBillDetails")
                        .HasForeignKey("ImportBillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.SupplyProduct", "SupplyProduct")
                        .WithMany("ImportBillDetails")
                        .HasForeignKey("SupplyProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Invoice", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Shipment", "Shipment")
                        .WithOne("Invoice")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Invoice", "ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Manager", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Manager", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Notification", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Order", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Address", "Address")
                        .WithOne("Order")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Order", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.OrderItem", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Payment", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Product", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Products")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("Products")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportBill", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.StorageManager", "StorageManager")
                        .WithMany("ProductExportBills")
                        .HasForeignKey("StorageManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductExportDetail", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.ProductExportBill", "ProductExportBill")
                        .WithMany("ProductExportDetails")
                        .HasForeignKey("ExportBillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("ProductExportDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductFavorite", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("ProductFavorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("ProductFavorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.ProductImage", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Rating", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Customer", "Customer")
                        .WithMany("Rates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.RefreshToken", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipment", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("Shipments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.ProductExportBill", "ProductExportBill")
                        .WithOne("Shipment")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Shipment", "ProductExportBillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Shipper", "Shipper")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Shipper", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("Shipper")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.Shipper", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.Storage", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.StorageManager", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Storage", "Storage")
                        .WithMany("StorageManagers")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithOne("StorageManager")
                        .HasForeignKey("Banana_E_Commerce_API.Entities.StorageManager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.SupplierPayment", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Admin", "Admin")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Supplier", "Supplier")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.SupplyProduct", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Product", "Product")
                        .WithMany("SupplyProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.Supplier", "Supplier")
                        .WithMany("SupplyProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Banana_E_Commerce_API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Banana_E_Commerce_API.Entities.User", b =>
                {
                    b.HasOne("Banana_E_Commerce_API.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
